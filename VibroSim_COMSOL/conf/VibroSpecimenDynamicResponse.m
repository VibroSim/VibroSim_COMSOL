%> @param xducercoord: coordinates of transducer contact (i.e. couplant_coord)

function VibroSpecimenDynamicResponse(M,geom,specimen,xducercoord)


  %% Create time domain model
  % (time domain model is commented out because our 
  % damping model is currently incompatible)
  %%addprop(M,'solidmech_timedomain');
  %%M.solidmech_timedomain=CreateVibroTimeDomain(M,geom,'solidmech_timedomain');
  %
  %VibroPhysics(M,geom,specimen,[],'timedomain|modal|multisweep',true); % formerly had harmonic
  VibroPhysics(M,geom,specimen,[],'modal|multisweep',true); % formerly had harmonic

  % Since the Physics is created after getnormals() is called, we can access the normal directions
  [normal,numpos]=GetNormal(M,geom,[ xducercoord(1), xducercoord(2), xducercoord(3) ]);

  %addprop(M,'timedomain_xducercontactprobe');
  %M.timedomain_xducercontactprobe=CreateProbe(M, 'vibrodynamic_timedomain_xducercontactprobe', M.solidmech_timedomain.tag, ...	
  %				   xducercoord(1), ...
  %				   xducercoord(2), ...
  %				   xducercoord(3), ... 
  %				   normal(1), ...
  %				   normal(2), ...
  %				   normal(3), ...
  %				   'bndsnap3','on');
				   
  %addprop(M,'harmonicsweep_xducercontactprobe');
  %M.harmonicsweep_xducercontactprobe=CreateProbe(M, 'vibrodynamic_harmonicsweep_xducercontactprobe', M.solidmech_harmonicsweep.tag, ...	
  %						 xducercoord(1), ...
  %						 xducercoord(2), ...
  %						 xducercoord(3), ... 
  %						 normal(1), ...
  %						 normal(2), ...
  %						 normal(3), ...
  %						 'bndsnap3','on');

  addprop(M,'multisweep_xducercontactprobe');
  M.multisweep_xducercontactprobe=CreateProbe(M, 'vibrodynamic_multisweep_xducercontactprobe', M.solidmech_multisweep.tag, ...	
						 xducercoord(1), ...
						 xducercoord(2), ...
						 xducercoord(3), ... 
						 normal(1), ...
						 normal(2), ...
						 normal(3), ...
						 'bndsnap3','on');

